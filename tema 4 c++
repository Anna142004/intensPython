1) #include <iostream>
#include <vector>

using namespace std;

// Функция для печати матрицы
void print_matrix(const vector<vector<double>>& matrix) {
  for (const auto& row : matrix) {
    for (const double& element : row) {
      cout << element << " ";
    }
    cout << endl;
  }
}

// Функция для решения СЛАУ матричным методом
vector<double> solve_slae_matrix_method(const vector<vector<double>>& A, const vector<double>& B) {
  // Проверка размеров матриц
  if (A.size() != B.size() || A[0].size() != B.size()) {
    throw invalid_argument("Несовпадающие размеры матриц");
  }

  // Прямой ход
  for (int i = 0; i < A.size(); ++i) {
    // Выбор главного элемента
    int max_index = i;
    for (int j = i + 1; j < A.size(); ++j) {
      if (abs(A[j][i]) > abs(A[max_index][i])) {
        max_index = j;
      }
    }

    // Перестановка строк
    if (max_index != i) {
      swap(A[i], A[max_index]);
      swap(B[i], B[max_index]);
    }

    // Деление строки на главный элемент
    if (A[i][i] != 0) {
      for (int j = 0; j < A[0].size(); ++j) {
        A[i][j] /= A[i][i];
      }
      B[i] /= A[i][i];
    }

    // Вычитание строк
    for (int j = i + 1; j < A.size(); ++j) {
      double factor = A[j][i];
      for (int k = 0; k < A[0].size(); ++k) {
        A[j][k] -= factor * A[i][k];
      }
      B[j] -= factor * B[i];
    }
  }

  // Обратный ход
  vector<double> X(B.size());
  for (int i = A.size() - 1; i >= 0; --i) {
    X[i] = B[i];
    for (int j = i + 1; j < A.size(); ++j) {
      X[i] -= A[i][j] * X[j];
    }

    // Деление на диагональный элемент
2)
#include <iostream>
#include <vector>

using namespace std;

// Функция для вычисления определителя матрицы
double determinant(const vector<vector<double>>& matrix) {
  if (matrix.size() != matrix[0].size()) {
    throw invalid_argument("Неквадратная матрица");
  }

  double det = 1;
  for (int i = 0; i < matrix.size(); ++i) {
    int j = i;
    while (matrix[j][i] == 0) {
      j++;
      if (j == matrix.size()) {
        return 0;
      }
      swap(matrix[i], matrix[j]);
    }

    det *= matrix[i][i];
    for (int k = i + 1; k < matrix.size(); ++k) {
      double factor = matrix[k][i] / matrix[i][i];
      for (int l = 0; l < matrix[0].size(); ++l) {
        matrix[k][l] -= factor * matrix[i][l];
      }
    }
  }

  return det;
}

// Функция для решения СЛАУ методом Крамера
vector<double> solve_slae_kramer_method(const vector<vector<double>>& A, const vector<double>& B) {
  // Проверка размеров матриц
  if (A.size() != B.size() || A[0].size() != B.size()) {
    throw invalid_argument("Несовпадающие размеры матриц");
  }

  // Вычисление определителя матрицы A
  double det_a = determinant(A);

  // Вычисление решений
  vector<double> X(B.size());
  for (int i = 0; i < B.size(); ++i) {
    vector<vector<double>> B_i(A.size());
    for (int j = 0; j < A.size(); ++j) {
      B_i[j][0] = B[j];
      for (int k = 0; k < A.size(); ++k) {
        if (k != i) {
          B_i[j][k] = A[j][k];
        }
      }
    }

    X[i] = determinant(B_i) / det_a;
  }

  return X;
}

// Функция для решения СЛАУ методом Якоби
vector<double> solve_slae_jacobi_method(const vector<vector<double>>& A, const vector<double>& B, double eps) {
  // Проверка размеров матриц
  if (A.size() != B.size() || A[0].size() != B.size()) {
    throw invalid_argument("Несовпадающие размеры матриц");
  }

  // Задаем начальные приближения
  vector<double> X(B.size());
  for (int i = 0; i < B.size(); ++i) {
    X[i] = 0;
  }

  // И
3)
#include <iostream>
#include <vector>

using namespace std;

// Функция для вычисления значения одной переменной
double calculateVariable(const vector<vector<double>> &A, const vector<double> &X, const vector<double> &B, int k) {
    double sum = 0;
    for (int j = 0; j < A.size(); j++) {
        if (j != k) {
            sum += A[k][j] * X[j];
        }
    }
    return (B[k] - sum) / A[k][k];
}

// Решение СЛАУ методом Зейделя
vector<double> solveSLE(const vector<vector<double>> &A, const vector<double> &B, double epsilon) {
    vector<double> X(A.size()); // Вектор неизвестных
    vector<double> Xk(A.size()); // Вектор значений на текущей итерации

    // Начальное приближение
    for (int i = 0; i < X.size(); i++) {
        X[i] = 1;
    }

    bool converged = false;
    int iterations = 0;
    while (!converged) {
        iterations++;
        for (int k = 0; k < A.size(); k++) {
            Xk[k] = calculateVariable(A, X, B, k);
        }

        double norm = 0;
        for (int i = 0; i < X.size(); i++) {
            norm += pow(X[i] - Xk[i], 2);
        }
4) #include <iostream>
#include <vector>

using namespace std;

// Функция для прямой прогонки
vector<double> forwardSubstitution(const vector<vector<double>> &A, const vector<double> &B) {
    vector<double> α(A.size()), β(A.size()), x(A.size());

    // Вычисление коэффициентов α
    for (int k = 1; k < A.size(); k++) {
        α[k] = -A[k][k - 1] / A[k - 1][k - 1];
    }

    // Вычисление коэффициентов β
    β[0] = B[0];
    for (int k = 1; k < A.size(); k++) {
        β[k] = B[k] - α[k] * β[k - 1];
    }

    // Вычисление значений x
    x[0] = β[0] / A[0][0];
    for (int k = 1; k < A.size(); k++) {
        x[k] = (1 / (A[k][k] + α[k] * A[k - 1][k])) * (β[k] - α[k] * x[k - 1]);
    }

    return x;
}

// Функция для обратной прогонки
vector<double> backwardSubstitution(const vector<vector<double>> &A, const vector<double> &x) {
    vector<double> y(A.size());

    y[A.size() - 1] = x[A.size() - 1];
    for (int k = A.size() - 2; k >= 0; k--) {
        y[k] = (1 / (A[k][k] + y[k + 1] * A[k + 1][k])) * (x[k] - y[k + 1] * A[k][k + 1]);
    }

    return y;
}

// Решение СЛАУ методом прогонки
vector<double> solveSLE(const vector<vector<double>> &A, const vector<double> &B) {
    vector<double> x = forwardSubstitution(A, B);
    vector<double> y = backwardSubstitution(A, x);
    return y;
}

int main() {
    // Данные системы уравнений
    vector<vector<double>> A = {
